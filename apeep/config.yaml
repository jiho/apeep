# 
# Default apeep settings
#
# syntax should follow YAML 1.1

# Input/Output
io:
  # directory where the .avi stacks are
  # is either an absolute path or a path relative to the *project* directory
  input_dir: /path/to/data

# Characteristics of the acquired images
acq:
  # orientation of the top of the picture
  # valid values are 'right' and 'left'
  top: right
  # number of lines scanned per second
  scan_per_s: 28000
  # height of the viewing window in mm (typically 100 to 120)
  # (this allows to compute the pixel size)
  window_height_mm: 105

# Sub-sampling.
subsampling:
    # Proportion of image to process. Between 0 and 1, 0 excluded
    subsampling_rate: 1
    # Rank of first image to process. Use this option to process new images without changing subsampling rate. Should be stictly positive. 
    first_image: 1

# Flat-fielding
flat_field:
  go: true

  # Whether to write the flat-fielded image to disk
  write_image: false
  
  # Size of moving window to compute flat-fielding (in px)
  # larger values avoid white streaks after dark objects but are longer to compute and less reactive
  # usually > 2000
  window_size: 8000
  
  # Size of the step by which the moving window advances
  # larger values speed computation up but may result in un-smooth changes
  # will be converted to 1 or a power of 2 (2, 4, 8, etc.)
  step_size: 1
  # NB: window_size will be converted into a multiple of step_size


# Output image enhancing
enhance:
  go: true

  # Whether to write the enhanced image to disk
  write_image: false
  
  # Size of the output image (in px)
  # larger values avoid clipping objects between frames, provide a better description of the grey levels, and are probably more CPU efficient (but more memory consuming)
  image_size: 10000
  # NB: image_size will be converted into a multiple of step_size

  # Percentage below which dark pixels are clipped to black
  # in [0,100]; 0 changes nothing, 100 makes everything black
  # to keep all the subtelities in the dark tones, set to 0
  dark_threshold: 0
  # Percentage above which pixels are clipped to white
  # in [0,100]; 100 changes nothing, 0 makes everything white
  # most of the image is light grey so values around 50 are common
  light_threshold: 40


# Segmentation
segment:
  go: true

  # Whether to write the segmentation mask to disk
  write_image: false
  
  # Whether to write an image stack with the segmentation mask on top of the enhanced image
  write_stack: false
  # Format of this stack
  stack_format:
    - psd # photoshop file
    - tif # multilayer tiff
    - rgb # RGB image with mask in R and data in G+B
  
  # Pipeline for segmentation method
  # 'regular' uses a gray level segmentation
  # 'semantic' uses semantic segmentation
  # 'both' uses a combination of semantic segmentation (better for small particles) and regular segmentation (better for large particles)
  pipeline: regular
  
  # Path to Detectron2 semantic segmentation model weights. Mandatory if pipeline is 'semantic' or 'both'.
  sem_model_path: /path/to/model
  
  # Confidence threshold above which to consider semantic segmentation predictions. 
  # Low value to increase recall, high value to increase precision.
  sem_conf_threshold: 0.6

  # Minimum area of particles generated by semantic segmentation pipeline to me measured and written out (in px)
  sem_min_area: 50
  
  # Maximum area of particles generated by semantic segmentation pipeline to me measured and written out (in px)
  sem_max_area: 300
  
  # Method to identify particles of interest
  # 'static' uses a fixed value for thresholding
  # 'percentile' considers pixels below a percentile of grey levels
  # 'otsu' uses Otsu thresholding (https://en.wikipedia.org/wiki/Otsu%27s_method)
  # 'auto' uses 'otsu' for clean images, 'percentile' otherwise
  method: percentile

  # Treshold
  # for method=static : grey value (where 0 is black and 100 is white) below which dark grey pixels are considered as particles
  # for method=percentile : percentage of dark grey pixels to consider as particles
  # in [0, 100]; 0 considers nothing, 100 considers all pixels
  threshold: 1.2

  # Value of variance in grey level below which 'auto' tresholding switches from 'otsu' to 'percentile'
  # sane values are between 0.001 and 0.002
  var_limit: 0.001
  
  # Number of pixels to grow  by to fill gaps in particles
  # NB: when Otsu thresholding is used, increased to 4/3 * dilate
  dilate: 3
  
  # Number of pixels to shrink particles by 
  erode: 2

  # Minimum area of particles generated regular pipeline to me measured and written out (in px)
  # NB: when Otsu thresholding is used, increased to 4/3 * min_area
  # Sane values are ~50 to a few hundreds. 
  # If both semantic and regular pipelines are to be used, it is recommanded to set sem_max_area and reg_min_area to the same value.
  reg_min_area: 300

  # Maximum area of particles generated regular pipeline to me measured and written out (in px) 
  # This allows to ignore very large irrelevant particles and save computation time.
  reg_max_area: 400000


# Particle measurements
measure:
  go: true
  
  # Whether to write particle images and properties to disk
  write_particles: true
  
  # Whether particle directories should be tar archives
  as_tar: true
  
  # Properties of particles to store in the particles.tsv file
  # see http://scikit-image.org/docs/dev/api/skimage.measure.html#regionprops
  properties:
    - label
    - area
    - bbox
    - convex_area
    - filled_area
    - eccentricity
    - equivalent_diameter
    - euler_number
    - inertia_tensor_eigvals
    - major_axis_length
    - minor_axis_length
    - max_intensity
    - mean_intensity
    - min_intensity
    - moments_hu
    - weighted_moments_hu
    - perimeter
    - orientation
    - centroid
